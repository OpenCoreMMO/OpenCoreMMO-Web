@page "/player/{Id:int}"
@inject IDialogService DialogService
@using MediatR
@using OCM.Application.Requests.Queries
@using OCM.Application.Response.Player

<PageTitle>Player #@Id</PageTitle>

@if (IsLoading)
{
    <MudPaper Elevation="1" Class="d-flex align-center justify-center pa-4 my-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText Class="ml-3">Loading player data...</MudText>
    </MudPaper>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudPaper Elevation="1" Class="d-flex align-center justify-center pa-4 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" />
        <MudText Class="ml-3" Color="Color.Error">@ErrorMessage</MudText>
    </MudPaper>
}
else if (Player == null)
{
    <MudPaper Elevation="1" Class="d-flex align-center justify-center pa-4 my-4">
        <MudIcon Icon="@Icons.Material.Filled.PersonOff" Color="Color.Warning" Size="Size.Large" />
        <MudText Class="ml-3" Color="Color.Warning">Player not found</MudText>
    </MudPaper>
}
else
{
    <MudPaper Elevation="1" Class="d-flex align-center pa-4 my-4">
        @* <MudAvatar Size="Size.Large" Class="me-3"> *@
        @*     <MudImage Src="avatars/paladin.png"></MudImage> *@
        @* </MudAvatar> *@
        <VocationAvatar Vocation="@Player.VocationName"/>
        <div>
            <MudText Typo="Typo.h5">@Player.Name</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Primary">@Player.VocationName</MudText>
        </div>
    </MudPaper>
}

@if (Player != null)
{
    <MudGrid Gutter="Size.Medium">
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-6">
                <MudButton StartIcon="@Icons.Material.Filled.Visibility" Variant="Variant.Filled" Color="Color.Primary"
                            Class="mb-2" FullWidth>Account
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="OpenPlayerInfoDialog" Variant="Variant.Filled"
                            Color="Color.Primary"
                            Class="mb-2" FullWidth>Edit Info
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="OpenSkillEditDialog" Variant="Variant.Filled"
                            Color="Color.Primary" FullWidth>
                    Edit Skills
                </MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-6">
                <div class="d-flex justify-space-between align-center mb-1">
                    <MudText Typo="Typo.subtitle1">Health</MudText>
                    <MudText Typo="Typo.caption">@Player.Health / @Player.MaxHealth</MudText>
                </div>
                <MudProgressLinear Value="@Player.HealthPercentage" Color="Color.Error" Style="height: 18px">
                    <ChildContent>
                        <MudText Typo="Typo.caption">@Player.HealthPercentage%</MudText>
                    </ChildContent>
                </MudProgressLinear>

                <div class="d-flex justify-space-between align-center mb-1">
                    <MudText Typo="Typo.subtitle1">Mana</MudText>
                    <MudText Typo="Typo.caption">@Player.Mana / @Player.MaxMana</MudText>
                </div>
                <MudProgressLinear Value="@Player.ManaPercentage" Color="Color.Info" Style="height: 18px">
                    <ChildContent>
                        <MudText Typo="Typo.caption">@Player.ManaPercentage%</MudText>
                    </ChildContent>
                </MudProgressLinear>

                <div class="d-flex align-center my-2" style="width: 42%">
                    <MudDivider Class="flex-grow-1"/>
                    <MudText Class="mx-2" Typo="Typo.subtitle1" Color="Color.Primary"><b>Skills</b></MudText>
                    <MudDivider Class="flex-grow-1"/>
                </div>

                @foreach (var skill in Skills)
                {
                    <MudText Typo="Typo.body2"><b>@skill.Key:</b>
                        <MudChip T="int">@skill.Value</MudChip>
                    </MudText>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Class="pa-6">
                <div class="d-flex justify-space-between align-center mb-1">
                    <MudText Typo="Typo.subtitle1">Level</MudText>
                    <MudText Typo="Typo.body2">@Player.Level</MudText>
                </div>
                <MudProgressLinear Value="@Player.LevelPercentage" Color="Color.Error" Style="height: 18px">
                    <ChildContent>
                        <MudText Typo="Typo.caption">@Player.LevelPercentage%</MudText>
                    </ChildContent>
                </MudProgressLinear>

                <MudText Typo="Typo.body2"><b>Experience:</b>
                    <MudChip T="int">@Player.Experience</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Soul Points:</b>
                    <MudChip T="byte">@Player.Soul</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Capacity:</b>
                    <MudChip T="int">@Player.Capacity</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Balance:</b>
                    <MudChip T="int">@Player.Balance</MudChip>
                </MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Class="pa-6">
                <MudText Typo="Typo.body2"><b>Vocation:</b>
                    <MudChip T="string">@Player.VocationName</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Group:</b>
                    <MudChip T="string">@Player.GroupName</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Sex:</b>
                    <MudChip T="string">@Player.Sex</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>World:</b>
                    <MudChip T="string">@Player.WorldName</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Town:</b>
                    <MudChip T="string">@Player.TownName</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Daily Reward:</b>
                    <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined"
                              Icon="@Icons.Material.Filled.Done">@Player.DailyReward</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Tutorial:</b>
                    <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined">@Player.Tutorial</MudChip>
                </MudText>
                <MudText Typo="Typo.body2"><b>Blessings:</b>
                    <MudChip T="string" Color="Color.Default">@Player.Blessings</MudChip>
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public int Id { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    public PlayerResponseViewModel Player { get; set; }
    public bool IsLoading { get; set; } = true;
    public string ErrorMessage { get; set; }

    public Dictionary<string, int> Skills => Player == null ? new() : new()
    {
        { "Magic Level", Player.MagicLevel },
        { "Fist Fighting", Player.SkillFist },
        { "Club Fighting", Player.SkillClub },
        { "Sword Fighting", Player.SkillSword },
        { "Axe Fighting", Player.SkillAxe },
        { "Distance Fighting", Player.SkillDist },
        { "Shielding", Player.SkillShielding },
        { "Fishing", Player.SkillFishing }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            var request = new GetPlayerByIdRequest { Id = Id };
            Player = await Mediator.Send(request);

            if (Player == null)
            {
                ErrorMessage = $"Player with ID {Id} not found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading player: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OpenPlayerInfoDialog()
    {
        if (Player == null) return;

        var parameters = new DialogParameters
        {
            ["Character"] = new PlayerInfoEdit.CharacterInfoEditViewModel
            {
                Balance = (int)Player.Balance,
                Capacity = (int)Player.Capacity,
                Experience = (int)Player.Experience,
                Level = Player.Level,
                Health = (int)Player.Health,
                MaxHealth = (int)Player.MaxHealth,
                Mana = Player.Mana,
                MaxMana = Player.MaxMana,
                SoulPoints = Player.Soul,
                Sex = Player.Sex,
                World = Player.WorldName,
                Town = Player.TownName,
                Name = Player.Name,
                Vocation = Player.VocationName,
                Id = Id
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<PlayerInfoEdit>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedCharacter = (PlayerInfoEdit.CharacterInfoEditViewModel)result.Data;
            // Save changes
        }
    }

    private async Task OpenSkillEditDialog()
    {
        if (Player == null) return;

        var parameters = new DialogParameters
        {
            ["Skill"] = new PlayerSkillEdit.PlayerSkillEditViewModel
            {
                Axe = Player.SkillAxe,
                Club = Player.SkillClub,
                Distance = Player.SkillDist,
                Fist = Player.SkillFist,
                Fishing = Player.SkillFishing,
                MagicLevel = Player.MagicLevel,
                Shielding = Player.SkillShielding,
                Sword = Player.SkillSword
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<PlayerSkillEdit>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedSkills = (PlayerSkillEdit.PlayerSkillEditViewModel)result.Data;
            // Save updated skills
        }
    }


}

@page "/player/{Id:int}"
@inject IDialogService DialogService

<PageTitle>Player #@Id</PageTitle>

<MudPaper Elevation="1" Class="d-flex align-center pa-4 my-4">
    @* <MudAvatar Size="Size.Large" Class="me-3"> *@
    @*     <MudImage Src="avatars/paladin.png"></MudImage> *@
    @* </MudAvatar> *@
    <VocationAvatar Vocation="@Player.Vocation"/>
    <div>
        <MudText Typo="Typo.h5">@Player.Name</MudText>
        <MudText Typo="Typo.subtitle2" Color="Color.Primary">@Player.Vocation</MudText>
    </div>
</MudPaper>

<MudGrid Gutter="Size.Medium">
    <MudItem xs="12" md="3">
        <MudPaper Class="pa-6">
            <MudButton StartIcon="@Icons.Material.Filled.Visibility" Variant="Variant.Filled" Color="Color.Primary"
                       Class="mb-2" FullWidth>Account
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="OpenPlayerInfoDialog" Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mb-2" FullWidth>Edit Info
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Edit" @onclick="OpenSkillEditDialog" Variant="Variant.Filled"
                       Color="Color.Primary" FullWidth>
                Edit Skills
            </MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudPaper Class="pa-6">
            <div class="d-flex justify-space-between align-center mb-1">
                <MudText Typo="Typo.subtitle1">Health</MudText>
                <MudText Typo="Typo.caption">@Player.Health / @Player.MaxHealth</MudText>
            </div>
            <MudProgressLinear Value="@Player.HealthPercentage" Color="Color.Error" Style="height: 18px">
                <ChildContent>
                    <MudText Typo="Typo.caption">@Player.HealthPercentage%</MudText>
                </ChildContent>
            </MudProgressLinear>

            <div class="d-flex justify-space-between align-center mb-1">
                <MudText Typo="Typo.subtitle1">Mana</MudText>
                <MudText Typo="Typo.caption">@Player.Mana / @Player.MaxMana</MudText>
            </div>
            <MudProgressLinear Value="@Player.ManaPercentage" Color="Color.Info" Style="height: 18px">
                <ChildContent>
                    <MudText Typo="Typo.caption">@Player.ManaPercentage%</MudText>
                </ChildContent>
            </MudProgressLinear>

            <div class="d-flex align-center my-2" style="width: 42%">
                <MudDivider Class="flex-grow-1"/>
                <MudText Class="mx-2" Typo="Typo.subtitle1" Color="Color.Primary"><b>Skills</b></MudText>
                <MudDivider Class="flex-grow-1"/>
            </div>

            @foreach (var skill in Skills)
            {
                <MudText Typo="Typo.body2"><b>@skill.Key:</b>
                    <MudChip T="int">@skill.Value</MudChip>
                </MudText>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="3">
        <MudPaper Class="pa-6">
            <div class="d-flex justify-space-between align-center mb-1">
                <MudText Typo="Typo.subtitle1">Level</MudText>
                <MudText Typo="Typo.body2">@Player.Level</MudText>
            </div>
            <MudProgressLinear Value="@Player.LevelPercentage" Color="Color.Error" Style="height: 18px">
                <ChildContent>
                    <MudText Typo="Typo.caption">@Player.LevelPercentage%</MudText>
                </ChildContent>
            </MudProgressLinear>

            <MudText Typo="Typo.body2"><b>Experience:</b>
                <MudChip T="int">@Player.Experience</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Soul Points:</b>
                <MudChip T="int">@Player.SoulPoints</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Capacity:</b>
                <MudChip T="int">@Player.Capacity</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Balance:</b>
                <MudChip T="int">@Player.Balance</MudChip>
            </MudText>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="3">
        <MudPaper Class="pa-6">
            <MudText Typo="Typo.body2"><b>Vocation:</b>
                <MudChip T="string">@Player.Vocation</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Group:</b>
                <MudChip T="string">@Player.Group</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Sex:</b>
                <MudChip T="string">@Player.Sex</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>World:</b>
                <MudChip T="string">@Player.World</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Town:</b>
                <MudChip T="string">@Player.Town</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Daily Reward:</b>
                <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined"
                         Icon="@Icons.Material.Filled.Done">@Player.DailyReward</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Tutorial:</b>
                <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined">@Player.Tutorial</MudChip>
            </MudText>
            <MudText Typo="Typo.body2"><b>Blessings:</b>
                <MudChip T="string" Color="Color.Default">@Player.Blessings</MudChip>
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public int Id { get; set; }
    public PlayerViewModel Player { get; set; }

    public Dictionary<string, int> Skills => new()
    {
        { "Magic Level", Player.MagicLevel },
        { "Fist Fighting", Player.FistFighting },
        { "Club Fighting", Player.ClubFighting },
        { "Sword Fighting", Player.SwordFighting },
        { "Axe Fighting", Player.AxeFighting },
        { "Distance Fighting", Player.DistanceFighting },
        { "Shielding", Player.Shielding },
        { "Fishing", Player.Fishing }
    };

    protected override async Task OnInitializedAsync()
    {
        Player = new PlayerViewModel
        {
            Name = "Rook Test",
            Vocation = "Paladin",
            Level = 5,
            Health = 170,
            MaxHealth = 170,
            HealthPercentage = 55,
            Mana = 75,
            MaxMana = 75,
            ManaPercentage = 85,
            MagicLevel = 4,
            FistFighting = 10,
            ClubFighting = 14,
            SwordFighting = 14,
            AxeFighting = 14,
            DistanceFighting = 15,
            Shielding = 12,
            Fishing = 10,
            LevelPercentage = 55,
            Experience = 896,
            SoulPoints = 6,
            Capacity = 440,
            Balance = 0,
            Group = "player",
            Sex = "male",
            World = "LocalHost",
            Town = "Dawnport",
            DailyReward = "Open",
            Tutorial = "x",
            Blessings = "Access edit"
        };
    }

    private async Task OpenPlayerInfoDialog()
    {
        var parameters = new DialogParameters
        {
            ["Character"] = new PlayerInfoEdit.CharacterInfoEditViewModel
            {
                Balance = Player.Balance,
                Capacity = Player.Capacity,
                Experience = Player.Experience,
                Level = Player.Level,
                Health = Player.Health,
                MaxHealth = Player.MaxHealth,
                Mana = Player.Mana,
                MaxMana = Player.MaxMana,
                SoulPoints = Player.SoulPoints,
                Sex = Player.Sex,
                World = Player.World,
                Town = Player.Town,
                Name = Player.Name,
                Vocation = Player.Vocation,
                Id = Id
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<PlayerInfoEdit>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedCharacter = (PlayerInfoEdit.CharacterInfoEditViewModel)result.Data;
            // Save changes
        }
    }

    private async Task OpenSkillEditDialog()
    {
        var parameters = new DialogParameters
        {
            ["Skill"] = new PlayerSkillEdit.PlayerSkillEditViewModel
            {
                Axe = Player.AxeFighting,
                Club = Player.ClubFighting,
                Distance = Player.DistanceFighting,
                Fist = Player.FistFighting,
                Fishing = Player.Fishing,
                MagicLevel = Player.MagicLevel,
                Shielding = Player.Shielding,
                Sword = Player.SwordFighting
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<PlayerSkillEdit>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedSkills = (PlayerSkillEdit.PlayerSkillEditViewModel)result.Data;
            // Save updated skills
        }
    }

    public class PlayerViewModel
    {
        public string Name { get; set; }
        public string Vocation { get; set; }
        public int Level { get; set; }
        public int Health { get; set; }
        public int MaxHealth { get; set; }
        public int HealthPercentage { get; set; }
        public int Mana { get; set; }
        public int MaxMana { get; set; }
        public int ManaPercentage { get; set; }
        public int MagicLevel { get; set; }
        public int FistFighting { get; set; }
        public int ClubFighting { get; set; }
        public int SwordFighting { get; set; }
        public int AxeFighting { get; set; }
        public int DistanceFighting { get; set; }
        public int Shielding { get; set; }
        public int Fishing { get; set; }
        public int LevelPercentage { get; set; }
        public int Experience { get; set; }
        public int SoulPoints { get; set; }
        public int Capacity { get; set; }
        public int Balance { get; set; }
        public string Group { get; set; }
        public string Sex { get; set; }
        public string World { get; set; }
        public string Town { get; set; }
        public string DailyReward { get; set; }
        public string Tutorial { get; set; }
        public string Blessings { get; set; }
    }

}

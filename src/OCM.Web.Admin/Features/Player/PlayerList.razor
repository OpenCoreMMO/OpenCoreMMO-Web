@page "/Players"
@using MediatR
@using NeoServer.Web.Admin
@using OCM.Application.Requests.Queries
@using OCM.Application.Response
@using OCM.Application.Response.Player
@inject IMediator Mediator
@inject ProgressBarState ProgressBarState

@rendermode @(new InteractiveServerRenderMode(false))

@if (Players?.Data is not null)
{
    <MudTable Items="Players?.Data" RowsPerPage="5" Bordered="true" Hover="true" Elevation="3">
        <ToolBarContent>
            <div>
                <MudText Typo="Typo.h6">Players</MudText>
                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">List of all created players</MudText>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Level</MudTh>
            <MudTh>Group</MudTh>
            <MudTh>Online</MudTh>
            <MudTd></MudTd>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudLink Typo="Typo.subtitle2" Href="@($"Player/{context.Id}")"
                         Style="text-decoration:none; color:inherit;">@context.Name</MudLink>
                <MudText Typo="Typo.body2">Paladin</MudText>
            </MudTd>
            <MudTd>@context.Level</MudTd>
            <MudTd>@context.Group</MudTd>
            <MudTd>
                <MudChip T="string" Color="@(context.Online ? Color.Success : Color.Error)">
                    @(context.Online ? "Online" : "Offline")
                </MudChip>
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"Player/{context.Id}")">
                    Edit
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Warning">
                    Logout
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    private BasePagedResponseViewModel<IEnumerable<PlayerResponseViewModel>> Players { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProgressBarState.Show();

        await LoadPlayers();

        ProgressBarState.Hide();
    }

    private async Task LoadPlayers()
    {
        Players = await Mediator.Send(new GetPlayersRequest
        {
            Limit = 10
        });
    }

}
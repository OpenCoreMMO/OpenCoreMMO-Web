@page "/Players"
@using MediatR
@using OCM.Application.Requests.Queries
@using OCM.Application.Response
@using OCM.Application.Response.Player
@inject IMediator Mediator
@inject ProgressBarState ProgressBarState

<PageTitle>Players</PageTitle>

@rendermode @(new InteractiveServerRenderMode(false))

<MudTable ServerData="ServerReload" Dense="true" Hover="true" Bordered="false" Class="mt-4">
    <ToolBarContent>
        <div>
            <MudText Typo="Typo.h6">Players</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">List of all created players</MudText>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Level</MudTh>
        <MudTh>Group</MudTh>
        <MudTh>Online</MudTh>
        <MudTd></MudTd>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudLink Typo="Typo.subtitle2" Href="@($"Players/{context.Id}")"
                      Style="text-decoration:none; color:inherit;">@context.Name</MudLink>
            <MudText Typo="Typo.body2">@context.VocationName</MudText>
        </MudTd>
        <MudTd>@context.Level</MudTd>
        <MudTd>@context.Group</MudTd>
        <MudTd>
            <MudChip T="string" Color="@(context.Online ? Color.Success : Color.Error)">
                @(context.Online ? "Online" : "Offline")
            </MudChip>
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"Players/{context.Id}")">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Warning">
                Logout
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    protected override async Task OnInitializedAsync()
    {
        ProgressBarState.Show();
        ProgressBarState.Hide();
    }

    private async Task<TableData<PlayerResponseViewModel>> ServerReload(TableState state, CancellationToken token)
    {
        var request = new GetPlayersRequest { Page = state.Page + 1, Limit = state.PageSize };
        var response = await Mediator.Send(request, token);
        return new TableData<PlayerResponseViewModel> { TotalItems = response.TotalRecords, Items = response.Data };
    }

}
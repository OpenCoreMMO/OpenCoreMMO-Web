@page "/accounts/{AccountId:int}"
@using MediatR
@using OCM.Application.Requests.Queries
@using OCM.Application.Requests.Commands
@using OCM.Application.Response
@using OCM.Application.Response.Player
@using OCM.Application.Response.Account
@using MudBlazor
@inject IMediator Mediator
@inject ISnackbar Snackbar

<MudGrid>
    <!-- Characters Table -->
    <MudItem xs="12" md="8">
        <MudPaper>
            <div Class="pa-6">
                <MudText Typo="Typo.h6">Characters</MudText>
                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">List of all characters on the account</MudText>
            </div>

            <MudTable T="PlayerResponseViewModel" ServerData="ServerReload" Dense="true" Hover="true" Class="mt-4">
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Level</MudTh>
                    <MudTh>Group</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh align="right">Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudAvatar Size="Size.Medium" Image="_content/MudBlazor.WebAssembly/images/avatars/avatar1.png"/>
                    </MudTd>
                    <MudTd>
                        <div>@context.Name</div>
                        <div class="text-sm text-secondary">@GetVocationName(context.Vocation)</div>
                    </MudTd>
                    <MudTd>@context.Level</MudTd>
                    <MudTd>@context.Group</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@(context.Online ? Color.Success : Color.Error)" Variant="Variant.Filled" Size="Size.Small">
                            @(context.Online ? "Online" : "Offline")
                        </MudChip>
                    </MudTd>
                    <MudTd align="right">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary"/>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>

    <!-- Account Info -->
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-6" Elevation="2">
            <MudText Typo="Typo.h6">Account Info</MudText>

            <MudTextField Label="Email" @bind-Value="Account.Email" ReadOnly="true" Class="mt-4"
                          Variant="Variant.Outlined"/>
            <MudTextField Label="Password" @bind-Value="Account.Password" InputType="InputType.Password"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Visibility"
                          Variant="Variant.Outlined"/>

            <MudGrid Class="mt-2">
                <MudItem xs="6">
                    <MudSelect T="int" Label="Page Access" @bind-Value="Account.PageAccess" Variant="Variant.Outlined">
                        @for (var i = 0; i <= 5; i++)
                        {
                            <MudSelectItem Value="@i">@i</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudSelect T="int" Label="Type" @bind-Value="Account.Type" Variant="Variant.Outlined">
                        @for (var i = 0; i <= 5; i++)
                        {
                            <MudSelectItem Value="@i">@i</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudTextField Label="Premium Days" @bind-Value="Account.PremiumDays" Class="mt-4"
                          Variant="Variant.Outlined"/>
            <MudTextField Label="Coins" @bind-Value="Account.Coins" Variant="Variant.Outlined"/>

            <MudButton Class="mt-6" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                       OnClick="SaveChanges">
                Save editions
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public int AccountId { get; set; }

    private AccountResponseViewModel Account { get; set; } = new AccountResponseViewModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccount();
    }

    private async Task LoadAccount()
    {
        var request = new GetAccountsRequest
        {
            // For now, we'll load all accounts and find the one with matching ID
            // In a real implementation, you might want a GetAccountById query
            Page = 1,
            Limit = 1000 // Load enough to find the account
        };

        var response = await Mediator.Send(request);
        Account = response.Data.FirstOrDefault(a => a.Id == AccountId);
    }

    private async Task<TableData<PlayerResponseViewModel>> ServerReload(TableState state, CancellationToken token)
    {
        var request = new GetPlayersRequest
        {
            AccountId = AccountId,
            Page = state.Page + 1,
            Limit = state.PageSize
        };

        var response = await Mediator.Send(request, token);
        return new TableData<PlayerResponseViewModel>
        {
            TotalItems = response.TotalRecords,
            Items = response.Data
        };
    }


    private string GetVocationName(byte vocation)
    {
        return vocation switch
        {
            1 => "Sorcerer",
            2 => "Druid",
            3 => "Paladin",
            4 => "Knight",
            _ => "Unknown"
        };
    }

    private async Task SaveChanges()
    {
        var request = new UpdateAccountRequest
        {
            Id = AccountId,
            Email = Account.Email,
            Password = Account.Password,
            PageAccess = Account.PageAccess,
            Type = Account.Type,
            PremiumDays = Account.PremiumDays,
            Coins = Account.Coins
        };

        var response = await Mediator.Send(request);

        if (response.IsSuccess)
        {
            Snackbar.Add("Account updated successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error updating account: {response.ErrorMessage}", Severity.Error);
        }
    }
}

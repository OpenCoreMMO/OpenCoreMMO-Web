@page "/worlds/{worldId:int}/edit"

@inject NavigationManager NavManager

<MudPaper Class="pa-6">

    <MudGrid Spacing="3">
        <MudItem xs="12" sm="6" md="3">
            <MudTextField Label="Name" @bind-Value="World.Name" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField Label="IP Address" @bind-Value="World.IpAddress" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudTextField Label="Port" @bind-Value="World.Port" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudSelect Label="Battle-Eye" T="string" @bind-Value="World.BattleEye" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Not protected by BattlEye.")">Not protected by BattlEye.</MudSelectItem>
                <MudSelectItem Value="@("Protected by BattlEye.")">Protected by BattlEye.</MudSelectItem>
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6" md="2">
            <MudSelect Label="Location" T="string" @bind-Value="World.Location" Variant="Variant.Outlined">
                <MudSelectItem Value="@("South America")">South America</MudSelectItem>
                <MudSelectItem Value="@("North America")">North America</MudSelectItem>
                <MudSelectItem Value="@("Europe")">Europe</MudSelectItem>
                <MudSelectItem Value="@("All")">All</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudSelect Label="Pvp Type" T="string" @bind-Value="World.PvpType" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Open PvP")">Open PvP</MudSelectItem>
                <MudSelectItem Value="@("Optional PvP")">Optional PvP</MudSelectItem>
                <MudSelectItem Value="@("Hardcore PvP")">Hardcore PvP</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudSelect Label="Premium Type" T="string" @bind-Value="World.PremiumType" Variant="Variant.Outlined">
                <MudSelectItem Value="@("free")">Free</MudSelectItem>
                <MudSelectItem Value="@("premium")">Premium</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudSelect Label="Transfer Type" T="string" @bind-Value="World.TransferType" Variant="Variant.Outlined">
                <MudSelectItem Value="@("blocked")">Blocked</MudSelectItem>
                <MudSelectItem Value="@("open")">Open</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudSelect Label="World Type" T="string" @bind-Value="World.WorldType" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Regular")">Regular</MudSelectItem>
                <MudSelectItem Value="@("Experimental")">Experimental</MudSelectItem>
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateWorld">Update World</MudButton>
        </MudItem>
    </MudGrid>

</MudPaper>

@code {
    [Parameter] public int worldId { get; set; }

    private WorldModel World = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulate loading from backend (replace with real API call)
        var allWorlds = GetWorldsFromServer(); // replace with service
        World = allWorlds.FirstOrDefault(w => w.Id == worldId) ?? new WorldModel();
    }

    private void UpdateWorld()
    {
        // TODO: Call backend to persist changes
        Console.WriteLine($"World '{World.Name}' updated.");
        NavManager.NavigateTo("/worlds");
    }

    // TEMP: Fake backend data
    private List<WorldModel> GetWorldsFromServer()
    {
        return new List<WorldModel>
        {
            new() { Id = 1, Name = "LocalHost", IpAddress = "127.0.0.1", Port = "7172", Location = "South America", PvpType = "Open PvP", PremiumType = "premium", TransferType = "blocked", BattleEye = "Not protected by BattlEye.", WorldType = "Regular" },
            new() { Id = 2, Name = "Dev Test", IpAddress = "206.42.57.225", Port = "7172", Location = "South America", PvpType = "Open PvP", PremiumType = "premium", TransferType = "blocked", BattleEye = "Not protected by BattlEye.", WorldType = "Regular" }
        };
    }

    public class WorldModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string IpAddress { get; set; }
        public string Port { get; set; }
        public string Location { get; set; }
        public string PvpType { get; set; }
        public string PremiumType { get; set; }
        public string TransferType { get; set; }
        public string BattleEye { get; set; }
        public string WorldType { get; set; }
    }

}

@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject ProgressBarState ProgressBarState
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@code{

    public bool IsDarkMode { get; set; }
    public string LogoImage => IsDarkMode ? "/Opencoremmo-icon.png" : "/Opencoremmo-white.png";

    readonly MudTheme _theme = new()
    {
        Typography = new Typography
        {
            Default = new DefaultTypography
            {
                FontFamily = ["Montserrat", "Roboto", "sans-serif"]
            }
        },
        PaletteLight = new PaletteLight
        {
            AppbarBackground = new MudColor("#105ed2")
        },
        PaletteDark = new PaletteDark
        {
            AppbarBackground = new MudColor("#1e1e1e"),
            Background = new MudColor("#252525"),
            Primary = new MudColor("#3883df"),
            Surface = new MudColor("#2d2d31"),
            AppbarText = new MudColor("#939393")
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadThemeFromLocalStorage();
        await base.OnInitializedAsync();
        ProgressBarState.OnChange += () => { InvokeAsync(StateHasChanged); };
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateBreadcrumbs(NavigationManager.Uri);
    }

    private async Task LoadThemeFromLocalStorage()
    {
        try
        {
            var storedTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
            if (!string.IsNullOrEmpty(storedTheme) && bool.TryParse(storedTheme, out var isDark))
            {
                IsDarkMode = isDark;
            }
        }
        catch
        {
            // If localStorage is not available, use default
        }
    }

    private async Task SaveThemeToLocalStorage()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", IsDarkMode.ToString());
        }
        catch
        {
            // If localStorage is not available, silently fail
        }
    }

    private void OnThemeChanged()
    {
        _ = SaveThemeToLocalStorage(); // Fire and forget
    }

    private string GetUserInitial(string? userName)
    {
        if (string.IsNullOrEmpty(userName))
            return "?";

        return userName.Length >= 2
            ? userName.Substring(0, 2).ToUpper()
            : userName.Substring(0, 1).ToUpper();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateBreadcrumbs(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBreadcrumbs(string uri)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(uri);
        if (string.IsNullOrEmpty(relativePath))
        {
            _items = new List<BreadcrumbItem> { new("Home", "/") };
            return;
        }

        var segments = relativePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        _items = new List<BreadcrumbItem> { new("Home", "/") };

        string currentPath = "/";
        foreach (var segment in segments)
        {
            currentPath += segment + "/";
            var displayName = System.Globalization.CultureInfo.CurrentCulture.TextInfo
                .ToTitleCase(segment.Replace("-", " ").Replace("_", " "));
            _items.Add(new BreadcrumbItem(displayName, currentPath.TrimEnd('/')));
        }
    }

}

<MudThemeProvider IsDarkMode="IsDarkMode" Theme="_theme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudImage Src="@LogoImage" Height="42" Style="margin-right: 15px"></MudImage>
        <MudText Typo="Typo.h6">Admin Dashboard</MudText>
        <MudSpacer/>
        <MudSwitch @bind-Value="IsDarkMode" @bind-Value:after="OnThemeChanged" Class="ma-4" T="bool"
                   Color="@(IsDarkMode ? Color.Primary : Color.Dark)"
                   ThumbIconColor="@(IsDarkMode ? Color.Default : Color.Dark)"
                   ThumbIcon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"/>

        <AuthorizeView>
            <Authorized>
                <MudAvatar Color="Color.Info" Variant="Variant.Filled">@GetUserInitial(context.User.Identity?.Name)</MudAvatar>
            </Authorized>
            <NotAuthorized>
                <MudAvatar Color="Color.Info" Variant="Variant.Filled">?</MudAvatar>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="pt-16" Style="display: flex; align-items: flex-start;" render-mode="InteractiveServer">

        @if (ProgressBarState.Visible)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Style="position: absolute"/>
        }

        <div style="flex: 1; padding-top:5px; padding-left: 5px" class="pa-4">

            <!-- Row layout for toggle and breadcrumbs -->
            <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                               OnClick="@(e => DrawerToggle())"/>
                <MudBreadcrumbs Items="_items"/>
            </div>

            @Body
        </div>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;

    private List<BreadcrumbItem> _items = new();


    public void Dispose()
    {
        ProgressBarState.OnChange -= StateHasChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}